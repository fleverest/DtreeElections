[{"path":"https://fleverest.github.io/elections.dtree/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Floyd Everest. Author, maintainer, copyright holder. Damjan Vukcevic. Author.","code":""},{"path":"https://fleverest.github.io/elections.dtree/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Everest F, Vukcevic D (2022). elections.dtree: Ranked Voting Election Audits Dirichlet-Trees. https://fleverest.github.io/elections.dtree/, https://github.com/fleverest/elections.dtree/.","code":"@Manual{,   title = {elections.dtree: Ranked Voting Election Audits with Dirichlet-Trees},   author = {Floyd Everest and Damjan Vukcevic},   year = {2022},   note = {https://fleverest.github.io/elections.dtree/, https://github.com/fleverest/elections.dtree/}, }"},{"path":"https://fleverest.github.io/elections.dtree/index.html","id":"ranked-voting-election-audits-with-dirichlet-trees","dir":"","previous_headings":"","what":"Ranked Voting Election Audits with Dirichlet-Trees","title":"Ranked Voting Election Audits with Dirichlet-Trees","text":"Perform ballot-polling Bayesian audits ranked voting elections using Dirichlet-tree prior distribution.","code":""},{"path":[]},{"path":"https://fleverest.github.io/elections.dtree/index.html","id":"cran","dir":"","previous_headings":"Installation","what":"CRAN","title":"Ranked Voting Election Audits with Dirichlet-Trees","text":"install latest minor release elections.dtree CRAN:","code":"install.packages(\"elections.dtree\")"},{"path":"https://fleverest.github.io/elections.dtree/index.html","id":"development","dir":"","previous_headings":"Installation","what":"Development","title":"Ranked Voting Election Audits with Dirichlet-Trees","text":"install development release elections.dtree GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"fleverest/elections.dtree\")"},{"path":[]},{"path":"https://fleverest.github.io/elections.dtree/index.html","id":"why","dir":"","previous_headings":"About the project","what":"Why?","title":"Ranked Voting Election Audits with Dirichlet-Trees","text":"Bayesian audits elections typically employ Dirichlet prior, conjugate multinomial distribution observed ballots. ranked voting systems, number ballot types can grow factorially. case instant-runoff voting (IRV), popular type ranked voting system, number possible ballot types n! n candidates (assuming candidates ranked; even greater partially completed ballots permitted). Dirichlet distribution simple effective choice number ballot types small, becomes problematic number gets large. n grows, prior concentration parameters (defined a0 implementation) need order 1 / n! ensure prior overly informative. n large enough, may smaller available floating-point precision. Also, fact varies n inconvenient. practical alternative given Dirichlet-tree distribution, implement package. Dirichlet-tree distribution consists nested Dirichlet distributions, arranged hierarchically tree structure. structure represents preference ordering candidates. Branches coming node correspond choices candidate select next preferred, nodes represent ranking candidates (complete ranking leaf nodes, incomplete ranking internal nodes). place Dirichlet distribution node, model conditional split preferences node. structure whole defines Dirichlet-tree distribution. Just like Dirichlet, conjugate multinomial distribution. Also, Dirichlet-tree generalisation, including Dirichlet special case. Using Dirichlet-tree prior distribution allows scale efficiently large n, require setting concentration parameters (a0) values depend n perform well. depend n perform well.","code":""},{"path":"https://fleverest.github.io/elections.dtree/index.html","id":"how","dir":"","previous_headings":"About the project","what":"How?","title":"Ranked Voting Election Audits with Dirichlet-Trees","text":"package, tree structure implemented nodes initialised appear observed ballot data (.e. least one ballots includes preference sequence represented node). allows memory-complexity O(n*m), m number ballots observed audit process. Without lazy evaluation, memory-complexity necessarily O(n!). Hence, implementation Dirichlet distribution (based reducible Dirichlet-tree structure) enables larger set candidates possible using traditional methods. sample unseen ballots without loading nodes memory, repository implements recursive strategy generates samples starting uninitialized point tree. works well IRV ballot structures, since permutation-tree structure easily navigated given target ballot. Currently, IRV elections implemented, ranked voting systems supported implementing corresponding social choice function. order support different tree structures elections deal high cardinality, similar recursive strategy sampling developed (anyone designing new tree structure consider carefully).","code":""},{"path":[]},{"path":"https://fleverest.github.io/elections.dtree/index.html","id":"s3-interface","dir":"","previous_headings":"Usage","what":"S3 interface","title":"Ranked Voting Election Audits with Dirichlet-Trees","text":"","code":"# Initialize a new Dirichlet-tree for IRV elections with # 26 candidates (named A through Z), requiring exactly 3 preferences # specified for a valid ballot, and using a prior parameter of 1.5. dtree <- dirtree(   candidates = LETTERS,   min_depth = 3,   max_depth = 3,   a0 = 1.5 )  # Create some generic ballots. ballots <- ranked_ballots(list(c(\"A\", \"B\"), c(\"C\", \"D\")), candidates = LETTERS)  # Sample 1000 random ballots from the tree. ballots <- sample_predictive(dtree, 1000)  # Check which candidate wins the simulated election. social_choice(ballots)  # Shuffle the ballots. ballots <- sample(ballots)  # Observe the first 100 ballots to obtain a posterior Dirichlet-tree. update(dtree, ballots[1:100])  # Evaluate 100 random election outcomes by: #  1. sampling 900 ballots from the posterior predictive distribution, and #  2. evaluating the outcome of the 900 total sampled ballots, plus the 100 observed. sample_posterior(dtree, n_elections = 100, n_ballots = 1000)  # Change the prior parameter and compare the posterior winning probabilities. dtree$a0 <- 1. sample_posterior(dtree, n_elections = 100, n_ballots = 1000)  # Do it again, with a Dirichlet prior using all available threads. dtree$vd <- TRUE sample_posterior(dtree, n_elections = 100, n_ballots = 1000, n_threads = Inf)  # Reset the distribution to the prior, removing observed data. This is equivalent to # creating a new tree with the same parameters. reset(dtree)"},{"path":"https://fleverest.github.io/elections.dtree/index.html","id":"r6-interface","dir":"","previous_headings":"Usage","what":"R6 interface","title":"Ranked Voting Election Audits with Dirichlet-Trees","text":"","code":"# Initialize a new Dirichlet-tree for IRV elections with # 26 candidates (named A through Z), requiring exactly 3 preferences # specified for a valid ballot, and using a prior parameter of 1.5. dtree <- dirichlet_tree$new(   candidates = LETTERS,   min_depth = 3,   max_depth = 3,   a0 = 1.5 )  # Sample 1000 random ballots from the tree. ballots <- dtree$sample_predictive(1000)  # Check which candidate wins the simulated election. social_choice(ballots)  # Shuffle the ballots. ballots <- sample(ballots)  # Observe the first 100 ballots to obtain a posterior Dirichlet-tree. dtree$update(ballots[1:100])  # Evaluate 100 random election outcomes by: #  1. sampling 900 ballots from the posterior predictive distribution, and #  2. evaluating the outcome of the 900 total sampled ballots, plus the 100 observed. dtree$sample_posterior(n_elections = 100, n_ballots = 1000)  # Change the prior parameter and compare the posterior winning probabilities. dtree$a0 <- 1. dtree$sample_posterior(n_elections = 100, n_ballots = 1000)  # Do it again, with a Dirichlet prior using all available threads. dtree$vd <- TRUE dtree$sample_posterior(n_elections = 100, n_ballots = 1000, n_threads = Inf)  # Reset the distribution to the prior, removing observed data. This is equivalent to # creating a new tree with the same parameters. dtree$reset()  # Additionally, the R6 interface allows you to chain commands. dtree <- dirichlet_tree$new(   candidates = LETTERS )$update(   ranked_ballots(     list(       c(\"A\", \"B\", \"C\"),       c(\"D\", \"E\", \"F\")     ),     candidates = LETTERS   ) )"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"dirichlet_tree object represents Dirichlet-tree distribution ballots. specifying tree structure ranked ballots, Dirichlet-tree initialized prior structure described Everest et al. (2022) . methods provided observing data (obtain posterior distribution) along methods sample election outcomes sets ballots posterior predictive distribution.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"R6Class generator object.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"Everest F, Blom M, Stark PB, Stuckey PJ, Teague V, Vukcevic D (2022). “Ballot-Polling Audits Instant-Runoff Voting Elections Dirichlet-Tree Model.” doi:10.48550/ARXIV.2209.03881 . . Everest F, Blom M, Stark PB, Stuckey PJ, Teague V, Vukcevic D (2022). “Auditing Ranked Voting Elections Dirichlet-Tree Models: First Steps.” doi:10.48550/ARXIV.2206.14605 . .","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"a0 Gets sets a0 parameter Dirichlet-tree. min_depth Gets sets min_depth parameter Dirichlet-tree. max_depth Gets sets max_depth parameter Dirichlet-tree. vd Gets sets vd parameter Dirichlet-tree.","code":""},{"path":[]},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"dirichlet_tree$new() dirichlet_tree$print() dirichlet_tree$update() dirichlet_tree$reset() dirichlet_tree$sample_posterior() dirichlet_tree$sample_predictive()","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"Create new dirichlet_tree prior distribution specified tree structure. See Everest et al. (2022)  details.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"","code":"dirichlet_tree$new(   candidates,   min_depth = 0,   max_depth = length(candidates) - 1,   a0 = 1,   vd = FALSE )"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"candidates character vector, element (must unique) representing single candidate. min_depth minimum number candidates must specified valid ballot election. max_depth maximum number candidates can specified valid ballot election. a0 prior parameter distribution. vd flag , TRUE, employs parameter structure reduces regular Dirichlet distribution described Everest et al. (2022) .","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"new dirichlet_tree prior.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"","code":"dtree <- dirichlet_tree$new(candidates = LETTERS, a0 = 1., min_depth = 1)"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"print shows details distribution parameters.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"","code":"dirichlet_tree$print()"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"dirichlet_tree object.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"Updates dirichlet_tree object observations ballots. updates parameter structure tree yield posterior Dirichlet-tree, described Everest et al. (2022) .","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"","code":"dirichlet_tree$update(ballots)"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"ballots set ballots observe - must class ranked_ballots.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"dirichlet_tree object.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"","code":"dirichlet_tree$new(   candidates = LETTERS )$update(   ranked_ballots(c(\"A\", \"B\", \"C\")) )"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"Resets dirichlet_tree observations revert parameter structure back originally specified prior.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"","code":"dirichlet_tree$reset()"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"dirichlet_tree object.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"","code":"dirichlet_tree$new(   candidates = LETTERS )$update(   ranked_ballots(c(\"A\", \"B\", \"C\")) )$reset()"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"method-sample-posterior-","dir":"Reference","previous_headings":"","what":"Method sample_posterior()","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"Draws sets ballots independent realizations Dirichlet-tree posterior, determines probability candidate elected aggregating results social choice function. See Everest et al. (2022)  details.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"","code":"dirichlet_tree$sample_posterior(   n_elections,   n_ballots,   n_winners = 1,   n_threads = NULL )"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"n_elections integer representing number elections generate. higher number yields higher precision output probabilities. n_ballots integer representing total number ballots cast election. n_winners number candidates elected election. n_threads maximum number threads process. default value NULL default 2 threads. Inf default maximum available, value greater equal maximum available result maximum available.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"numeric vector containing probabilities candidate elected.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"","code":"dirichlet_tree$new(   candidates = LETTERS,   a0 = 1.,   min_depth = 3,   max_depth = 6,   vd = FALSE )$update(   ranked_ballots(c(\"A\",\"B\",\"C\")) )$sample_posterior(   n_elections = 10,   n_ballots = 10 )"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"method-sample-predictive-","dir":"Reference","previous_headings":"","what":"Method sample_predictive()","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"sample_predictive draws ballots multinomial distribution ballot probabilities obtained single realization Dirichlet-tree posterior ranked ballots. See Everest et al. (2022)  details.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"","code":"dirichlet_tree$sample_predictive(n_ballots)"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"n_ballots integer representing total number ballots cast election.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"ranked_ballots object containing n_ballots ballots drawn single realisation posterior Dirichlet-tree.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"","code":"dirichlet_tree$new(   candidates = LETTERS,   a0 = 1.,   min_depth = 3,   max_depth = 6,   vd = FALSE )$update(   ranked_ballots(c(\"A\",\"B\",\"C\")) )$sample_predictive(   n_ballots = 10 )"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirichlet_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Dirichlet-tree for modelling ranked ballots — dirichlet_tree","text":"","code":"## ------------------------------------------------ ## Method `dirichlet_tree$new` ## ------------------------------------------------  dtree <- dirichlet_tree$new(candidates = LETTERS, a0 = 1., min_depth = 1)   ## ------------------------------------------------ ## Method `dirichlet_tree$update` ## ------------------------------------------------  dirichlet_tree$new(   candidates = LETTERS )$update(   ranked_ballots(c(\"A\", \"B\", \"C\")) )   ## ------------------------------------------------ ## Method `dirichlet_tree$reset` ## ------------------------------------------------  dirichlet_tree$new(   candidates = LETTERS )$update(   ranked_ballots(c(\"A\", \"B\", \"C\")) )$reset()   ## ------------------------------------------------ ## Method `dirichlet_tree$sample_posterior` ## ------------------------------------------------  dirichlet_tree$new(   candidates = LETTERS,   a0 = 1.,   min_depth = 3,   max_depth = 6,   vd = FALSE )$update(   ranked_ballots(c(\"A\",\"B\",\"C\")) )$sample_posterior(   n_elections = 10,   n_ballots = 10 ) #>   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R   S   T  #> 0.3 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.2 0.1 0.0 0.1 0.1 0.0 0.0 0.0 0.0 0.1  #>   U   V   W   X   Y   Z  #> 0.0 0.0 0.1 0.0 0.0 0.0    ## ------------------------------------------------ ## Method `dirichlet_tree$sample_predictive` ## ------------------------------------------------  dirichlet_tree$new(   candidates = LETTERS,   a0 = 1.,   min_depth = 3,   max_depth = 6,   vd = FALSE )$update(   ranked_ballots(c(\"A\",\"B\",\"C\")) )$sample_predictive(   n_ballots = 10 ) #> [[1]] #> [1] \"B\" \"F\" \"L\" \"M\" \"O\" \"K\" #>  #> [[2]] #> [1] \"G\" \"P\" \"H\" \"Q\" \"F\" #>  #> [[3]] #> [1] \"G\" \"R\" \"L\" \"P\" \"Z\" \"S\" #>  #> [[4]] #> [1] \"G\" \"X\" \"B\" \"N\" \"Z\" \"F\" #>  #> [[5]] #> [1] \"L\" \"K\" \"V\" \"S\" \"H\" \"O\" #>  #> [[6]] #> [1] \"O\" \"F\" \"D\" \"G\" \"Z\" \"E\" #>  #> [[7]] #> [1] \"O\" \"H\" \"Q\" \"F\" \"Y\" \"Z\" #>  #> [[8]] #> [1] \"Q\" \"W\" \"J\" \"N\" \"K\" \"V\" #>  #> [[9]] #> [1] \"W\" \"Y\" \"M\" \"Q\" \"X\" \"H\" #>  #> [[10]] #> [1] \"Y\" \"R\" \"L\" \"W\" #>  #> attr(,\"class\") #> [1] \"ranked_ballots\" #> attr(,\"candidates\") #>  [1] \"Z\" \"X\" \"Y\" \"V\" \"T\" \"Q\" \"O\" \"N\" \"A\" \"C\" \"W\" \"U\" \"D\" \"I\" \"B\" \"H\" \"S\" \"E\" \"F\" #> [20] \"G\" \"K\" \"J\" \"P\" \"L\" \"R\" \"M\""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Dirichlet-tree object — dirtree","title":"Create a Dirichlet-tree object — dirtree","text":"dirtree used create Dirichlet-tree modelling ballots, described Everest et al. (2022) .","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Dirichlet-tree object — dirtree","text":"","code":"dirtree(   candidates,   min_depth = 0,   max_depth = length(candidates),   a0 = 1,   vd = FALSE )"},{"path":"https://fleverest.github.io/elections.dtree/reference/dirtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Dirichlet-tree object — dirtree","text":"candidates character vector, element (must unique) representing single candidate. min_depth minimum number candidates must specified valid ballot. max_depth maximum number candidates can specified valid ballot. a0 prior parameter distribution. vd flag , TRUE, employs parameter structure reduces regular Dirichlet distribution described Everest et al. (2022) .","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirtree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Dirichlet-tree object — dirtree","text":"Dirichlet-tree representing ranked ballots, object class dirichlet_tree.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/dirtree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a Dirichlet-tree object — dirtree","text":"Everest F, Blom M, Stark PB, Stuckey PJ, Teague V, Vukcevic D (2022). “Ballot-Polling Audits Instant-Runoff Voting Elections Dirichlet-Tree Model.” doi:10.48550/ARXIV.2209.03881 . . Everest F, Blom M, Stark PB, Stuckey PJ, Teague V, Vukcevic D (2022). “Auditing Ranked Voting Elections Dirichlet-Tree Models: First Steps.” doi:10.48550/ARXIV.2206.14605 . .","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/ranked_ballots.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a set of ranked ballots. — ranked_ballots","title":"Construct a set of ranked ballots. — ranked_ballots","text":"ranked_ballots used easily construct set ranked ballots.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/ranked_ballots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a set of ranked ballots. — ranked_ballots","text":"","code":"ranked_ballots(x, candidates = NULL, ...)"},{"path":"https://fleverest.github.io/elections.dtree/reference/ranked_ballots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a set of ranked ballots. — ranked_ballots","text":"x character vector representing single ballot, list character vectors representing multiple ballots. candidates character vector names corresponding candidates running election. \\dots Additional parameters pass ranked_ballots.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/ranked_ballots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a set of ranked ballots. — ranked_ballots","text":"ranked_ballots object representing ballot(s).","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/ranked_ballots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a set of ranked ballots. — ranked_ballots","text":"","code":"ranked_ballots(LETTERS[1:5]) #> [[1]] #> [1] \"A\" \"B\" \"C\" \"D\" \"E\" #>  #> attr(,\"class\") #> [1] \"ranked_ballots\" #> attr(,\"candidates\") #> [1] \"A\" \"B\" \"C\" \"D\" \"E\" ranked_ballots(list(LETTERS[1:5], LETTERS[6:1])) #> [[1]] #> [1] \"A\" \"B\" \"C\" \"D\" \"E\" #>  #> [[2]] #> [1] \"F\" \"E\" \"D\" \"C\" \"B\" \"A\" #>  #> attr(,\"class\") #> [1] \"ranked_ballots\" #> attr(,\"candidates\") #> [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\""},{"path":"https://fleverest.github.io/elections.dtree/reference/read_ballots.html","id":null,"dir":"Reference","previous_headings":"","what":"Read ranked_ballots from a file. — read_ballots","title":"Read ranked_ballots from a file. — read_ballots","text":"Reads set partial IRV ballots file. file expected follow ballot:count standard, header describing participating candidates.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/read_ballots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read ranked_ballots from a file. — read_ballots","text":"","code":"read_ballots(file)"},{"path":"https://fleverest.github.io/elections.dtree/reference/read_ballots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read ranked_ballots from a file. — read_ballots","text":"file name file read , character vector file lines.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear the internal state of a dirichlet_tree object. — reset","title":"Clear the internal state of a dirichlet_tree object. — reset","text":"Destroy Tree's internal state revert back prior.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear the internal state of a dirichlet_tree object. — reset","text":"","code":"reset(dtree)"},{"path":"https://fleverest.github.io/elections.dtree/reference/reset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear the internal state of a dirichlet_tree object. — reset","text":"dtree dirichlet_tree object.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear the internal state of a dirichlet_tree object. — reset","text":"dirichlet_tree object.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/sample_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw election outcomes from the posterior distribution. — sample_posterior","title":"Draw election outcomes from the posterior distribution. — sample_posterior","text":"sample_posterior draws sets ballots independent realizations Dirichlet-tree posterior, determines probability candidate elected aggregating results social choice function. See Everest et al. (2022)  details.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/sample_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw election outcomes from the posterior distribution. — sample_posterior","text":"","code":"sample_posterior(   dtree,   n_elections,   n_ballots,   n_winners = 1,   n_threads = NULL )"},{"path":"https://fleverest.github.io/elections.dtree/reference/sample_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw election outcomes from the posterior distribution. — sample_posterior","text":"dtree dirichlet_tree object. n_elections integer representing number elections generate. higher number yields higher precision output probabilities. n_ballots integer representing total number ballots cast election. n_winners number candidates elected election. n_threads maximum number threads process. default value NULL default 2 threads. Inf default maximum available, value greater equal maximum available result maximum available.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/sample_posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw election outcomes from the posterior distribution. — sample_posterior","text":"numeric vector containing probabilities candidate elected.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/sample_posterior.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Draw election outcomes from the posterior distribution. — sample_posterior","text":"Everest F, Blom M, Stark PB, Stuckey PJ, Teague V, Vukcevic D (2022). “Ballot-Polling Audits Instant-Runoff Voting Elections Dirichlet-Tree Model.” doi:10.48550/ARXIV.2209.03881 . . Everest F, Blom M, Stark PB, Stuckey PJ, Teague V, Vukcevic D (2022). “Auditing Ranked Voting Elections Dirichlet-Tree Models: First Steps.” doi:10.48550/ARXIV.2206.14605 . .","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/sample_predictive.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw ballots from the posterior predictive distribution. — sample_predictive","title":"Draw ballots from the posterior predictive distribution. — sample_predictive","text":"sample_predictive draws ballots multinomial distribution probabilities obtained single realization Dirichlet-tree posterior ranked ballots. See Everest et al. (2022)  details.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/sample_predictive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw ballots from the posterior predictive distribution. — sample_predictive","text":"","code":"sample_predictive(dtree, n_ballots)"},{"path":"https://fleverest.github.io/elections.dtree/reference/sample_predictive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw ballots from the posterior predictive distribution. — sample_predictive","text":"dtree dirichlet_tree object. n_ballots integer representing number ballots draw.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/sample_predictive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw ballots from the posterior predictive distribution. — sample_predictive","text":"ranked_ballots object containing n_ballots ballots drawn single realisation posterior Dirichlet-tree.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/sample_predictive.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Draw ballots from the posterior predictive distribution. — sample_predictive","text":"Everest F, Blom M, Stark PB, Stuckey PJ, Teague V, Vukcevic D (2022). “Ballot-Polling Audits Instant-Runoff Voting Elections Dirichlet-Tree Model.” doi:10.48550/ARXIV.2209.03881 . . Everest F, Blom M, Stark PB, Stuckey PJ, Teague V, Vukcevic D (2022). “Auditing Ranked Voting Elections Dirichlet-Tree Models: First Steps.” doi:10.48550/ARXIV.2206.14605 . .","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/social_choice.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the outcome of an election. — social_choice","title":"Compute the outcome of an election. — social_choice","text":"social_choice reads set ballots, computes outcome election. outcome described vector winning candidates, along elimination order losing candidates.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/social_choice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the outcome of an election. — social_choice","text":"","code":"social_choice(x, ...)"},{"path":"https://fleverest.github.io/elections.dtree/reference/social_choice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the outcome of an election. — social_choice","text":"x set ballots compute outcome social choice function. \\dots Additional parameters pass social_choice.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/social_choice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the outcome of an election. — social_choice","text":"","code":"social_choice(ranked_ballots(list(LETTERS[1], LETTERS[1], LETTERS[2]))) #> $elimination_order #> [1] \"B\" #>  #> $winners #> [1] \"A\" #>"},{"path":"https://fleverest.github.io/elections.dtree/reference/social_choice.ranked_ballots.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a social choice function on a set of ranked_ballots. — social_choice.ranked_ballots","title":"Evaluate a social choice function on a set of ranked_ballots. — social_choice.ranked_ballots","text":"social_choice.ranked_ballots reads set ranked ballots computes election outcome. outcome depends chosen social choice function, along associated parameters.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/social_choice.ranked_ballots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a social choice function on a set of ranked_ballots. — social_choice.ranked_ballots","text":"","code":"# S3 method for ranked_ballots social_choice(x, n_winners = 1, fn = \"irv\", ...)"},{"path":"https://fleverest.github.io/elections.dtree/reference/social_choice.ranked_ballots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a social choice function on a set of ranked_ballots. — social_choice.ranked_ballots","text":"x set ballots compute outcome IRV social choice function. n_winners number candidates elect. fn social choice function use. \"irv\" IRV social choice function. \\dots Unused.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/tick-sub-.ranked_ballots-tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Access Subsets of Ballots. — `[.ranked_ballots`","title":"Access Subsets of Ballots. — `[.ranked_ballots`","text":"Extract subsets ballots index.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/tick-sub-.ranked_ballots-tick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access Subsets of Ballots. — `[.ranked_ballots`","text":"","code":"# S3 method for ranked_ballots [(x, i = NULL)"},{"path":"https://fleverest.github.io/elections.dtree/reference/tick-sub-.ranked_ballots-tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access Subsets of Ballots. — `[.ranked_ballots`","text":"x ranked_ballots. index, vector indices corresponding ballot extracted.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a dirichlet_tree model by observing some ranked ballots. — update","title":"Update a dirichlet_tree model by observing some ranked ballots. — update","text":"update updates Dirichlet-tree model observations obtain posterior distribution ranked ballots. See Everest et al. (2022)  implementation details.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a dirichlet_tree model by observing some ranked ballots. — update","text":"","code":"# S3 method for dirichlet_tree update(object, ballots, ...)"},{"path":"https://fleverest.github.io/elections.dtree/reference/update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a dirichlet_tree model by observing some ranked ballots. — update","text":"object dirichlet_tree object. ballots set ballots - must type ranked_ballots. \\dots Unused.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a dirichlet_tree model by observing some ranked ballots. — update","text":"dirichlet_tree object.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Update a dirichlet_tree model by observing some ranked ballots. — update","text":"Everest F, Blom M, Stark PB, Stuckey PJ, Teague V, Vukcevic D (2022). “Ballot-Polling Audits Instant-Runoff Voting Elections Dirichlet-Tree Model.” doi:10.48550/ARXIV.2209.03881 . . Everest F, Blom M, Stark PB, Stuckey PJ, Teague V, Vukcevic D (2022). “Auditing Ranked Voting Elections Dirichlet-Tree Models: First Steps.” doi:10.48550/ARXIV.2206.14605 . .","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/write_ballots.html","id":null,"dir":"Reference","previous_headings":"","what":"Write ranked_ballots to a file. — write_ballots","title":"Write ranked_ballots to a file. — write_ballots","text":"Writes set ballots new file. follows ballot:count standard, header describing candidates.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/write_ballots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write ranked_ballots to a file. — write_ballots","text":"","code":"write_ballots(ballots, filename = \"\", return_lines = FALSE, suppress = FALSE)"},{"path":"https://fleverest.github.io/elections.dtree/reference/write_ballots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write ranked_ballots to a file. — write_ballots","text":"ballots ranked_ballots write file. filename name file write , \"\" write output stdout. return_lines flag determines whether output returned character vector suppress flag , True, suppresses output stdout.","code":""},{"path":"https://fleverest.github.io/elections.dtree/reference/write_ballots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write ranked_ballots to a file. — write_ballots","text":"","code":"# \\donttest{ write_ballots(ranked_ballots(c(LETTERS)), \"test.txt\") # Output to test.txt # } write_ballots(ranked_ballots(c(LETTERS))) # Output to stdout #> A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z #> A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z #> -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- #> (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z) : 1"},{"path":"https://fleverest.github.io/elections.dtree/news/index.html","id":"electionsdtree-100","dir":"Changelog","previous_headings":"","what":"elections.dtree 1.0.0","title":"elections.dtree 1.0.0","text":"CRAN release: 2022-09-14 Initial release","code":""}]
